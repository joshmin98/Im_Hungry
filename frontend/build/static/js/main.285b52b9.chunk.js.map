{"version":3,"sources":["components/HomePage.js","components/ListManagementPage.js","App.js","serviceWorker.js","index.js"],"names":["PageLayout","styled","div","_templateObject","SearchLayout","_templateObject2","SearchInput","input","_templateObject3","SearchButton","button","_templateObject4","withRouter","props","_useState","useState","_useState2","Object","slicedToArray","searchQuery","setSearchQuery","_useState3","_useState4","numResults","setNumResults","react_default","a","createElement","value","onChange","event","target","onClick","console","log","alert","concat","history","push","HeadingLayout","ListManagementPage_templateObject","NavLayout","ListManagementPage_templateObject2","NavSelect","select","ListManagementPage_templateObject3","NavButton","ListManagementPage_templateObject4","ItemLayout","_templateObject5","dark","RestaurantItemLayout","_templateObject6","RecipeItemLayout","_templateObject7","loading","setLoading","selectedList","setSelectedList","_useState5","id","title","prepTime","cookTime","price","_useState6","recipes","setRecipes","_useState7","driveTime","_useState8","restaurants","useEffect","match","params","list","defaultValue","hidden","map","recipe","idx","Link","to","key","restaurant","isDark","length","App","className","BrowserRouter","Fragment","Route","exact","path","component","HomePage","ListManagementPage","Component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.285b52b9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst PageLayout = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst SearchLayout = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst SearchInput = styled.input`\n  background-color: white;\n  margin: 5px;\n`;\n\nconst SearchButton = styled.button`\n  background-color: white;\n  margin: 5px;\n`;\n\nlet HomePage = props => {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [numResults, setNumResults] = useState(5);\n\n  const sendQuery = () => {\n    // TODO: fetch query\n    console.log(searchQuery, numResults);\n    alert(`query: ${searchQuery}, num results: ${numResults}`);\n    props.history.push(\"/search\");\n  };\n\n  return (\n    <PageLayout>\n      <h1>I'm Hungry</h1>\n      <SearchLayout>\n        <SearchInput\n          value={searchQuery}\n          onChange={event => {\n            setSearchQuery(event.target.value);\n          }}\n        />\n        <SearchInput\n          value={numResults}\n          onChange={event => {\n            setNumResults(event.target.value);\n          }}\n        />\n        <SearchButton onClick={sendQuery}>I'm Hungry</SearchButton>\n      </SearchLayout>\n    </PageLayout>\n  );\n};\n\nexport default withRouter(HomePage);\n","import React, { useState, useEffect } from \"react\";\nimport { withRouter, Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\n/* Start page styling */\nconst HeadingLayout = styled.div`\n  display: flex;\n  flex-direction: row;\n  padding: 10px;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\n\nconst NavLayout = styled.div`\n  width: 200px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst NavSelect = styled.select`\n  background-color: white;\n  margin: 5px;\n`;\n\nconst NavButton = styled.button`\n  background-color: white;\n  margin: 5px;\n`;\n\nconst ItemLayout = styled.div`\n  display: flex;\n  flex-direction: row;\n  padding: 10px;\n  align-items: flex-start;\n  justify-content: space-between;\n  background-color: ${props => (props.dark ? \"grey\" : \"#f5f5f5\")};\n`;\n\nconst RestaurantItemLayout = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst RecipeItemLayout = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n/* End page styling */\n\nlet ListManagementPage = props => {\n  /* Initialize page state */\n  const [loading, setLoading] = useState(true);\n  const [selectedList, setSelectedList] = useState(\"\");\n\n  /* Start Testing data */\n  const [recipes, setRecipes] = useState([\n    { id: 1, title: \"Recipe 1\", prepTime: 3, cookTime: 20, price: 4.15 },\n    { id: 2, title: \"Recipe 2\", prepTime: 4, cookTime: 22, price: 8.3 },\n    { id: 3, title: \"Recipe 3\", prepTime: 5, cookTime: 24, price: 12.45 }\n  ]);\n  const [restaurants, setRestaurants] = useState([\n    { id: 4, title: \"Restaurant 1\", driveTime: 20, price: 11.95 },\n    { id: 5, title: \"Restaurant 2\", driveTime: 5, price: 5.95 },\n    { id: 6, title: \"Restaurant 3\", driveTime: 30, price: 5.65 }\n  ]);\n  /* End Testing Data */\n\n  /* Load data from localStorage */\n  useEffect(() => {\n    setLoading(false);\n  }, []);\n\n  let results = loading ? (\n    <p>Loading...</p>\n  ) : (\n    <div>\n      <HeadingLayout>\n        <h1>{props.match.params.list}</h1>\n        <NavLayout>\n          <NavSelect\n            onChange={event => setSelectedList(event.target.value)}\n            defaultValue=\"\"\n          >\n            <option value=\"\" hidden=\"hidden\" />\n            <option>Favorites</option>\n            <option>To Explore</option>\n            <option>Do Not Show</option>\n          </NavSelect>\n          <NavButton\n            onClick={() => {\n              if (selectedList !== \"\") {\n                props.history.push(`/lists/${selectedList}`);\n              }\n            }}\n          >\n            Manage Lists\n          </NavButton>\n          <NavButton onClick={() => props.history.push(\"/search\")}>\n            Return to Results\n          </NavButton>\n          <NavButton\n            onClick={() => {\n              props.history.push(\"/\");\n            }}\n          >\n            Return to Search\n          </NavButton>\n        </NavLayout>\n      </HeadingLayout>\n\n      <button onClick={() => setRecipes([])}>TEST</button>\n\n      {recipes.map((recipe, idx) => {\n        return (\n          <Link to={`/recipe/${recipe.id}`} key={\"recipe\" + idx}>\n            <ItemLayout dark={idx % 2 === 0}>\n              <RecipeItemLayout>\n                <h2>{recipe.title}</h2>\n                <p>Cook Time: {recipe.cookTime}</p>\n                <p>Prep Time: {recipe.prepTime}</p>\n              </RecipeItemLayout>\n              <h2>${recipe.price}</h2>\n            </ItemLayout>\n          </Link>\n        );\n      })}\n      {restaurants.map((restaurant, idx) => {\n        let isDark = recipes.length % 2 === 0 ? idx % 2 === 0 : idx % 2 !== 0;\n        return (\n          <Link to={`/restaurant/${restaurant.id}`} key={\"restaurant\" + idx}>\n            <ItemLayout dark={isDark}>\n              <RestaurantItemLayout>\n                <h2>{restaurant.title}</h2>\n                <p>Drive Time: {restaurant.driveTime} mins</p>\n              </RestaurantItemLayout>\n              <h2>${restaurant.price}</h2>\n            </ItemLayout>\n          </Link>\n        );\n      })}\n    </div>\n  );\n  return results;\n};\n\nexport default withRouter(ListManagementPage);\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport HomePage from \"./components/HomePage\";\nimport ListManagementPage from \"./components/ListManagementPage\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <>\n            <Route exact path=\"/\" component={HomePage} />\n            <Route path=\"/lists/:list\" component={ListManagementPage} />\n          </>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}